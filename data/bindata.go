// Code generated by go-bindata.
// sources:
// templates/README.template
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesReadmeTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x6f\xf2\x30\x0c\x86\xef\xfd\x15\xef\x81\x6b\xd2\x3b\x12\xa7\x4f\xdf\x71\xd2\x34\xf1\x03\x30\xd4\xa5\x99\xd2\x04\x39\x06\x84\xaa\xfe\xf7\x29\x11\x14\xb6\x81\x86\xa6\x1d\xeb\xfa\xf5\x63\x3f\xa9\xeb\xba\xae\xb0\xec\x5c\x42\xeb\x3c\xe3\x48\x09\x5b\x0e\x2c\xa4\xdc\x60\x7d\xc2\x0b\xcb\x86\x34\x8a\xc5\xbf\x8e\xc2\x96\x13\x34\x42\xa7\xfe\x9e\x4e\x58\x33\xe2\x81\xe5\x28\x4e\x95\x43\x05\xd7\x4e\x29\xb8\x04\x61\x23\xfb\x60\xab\x82\x5a\x60\x18\x60\xdf\x98\x9a\x9e\x6d\xa0\x9e\x31\x8e\xd5\x30\x18\xcc\x24\x46\xc5\x7c\x01\x0b\x53\x4a\x90\x8c\xc3\x6c\x27\xf1\x9d\x37\xea\x62\x28\x7f\xcf\xd1\x6b\x35\xe5\x09\xd5\xff\x70\x70\x12\x43\xcf\x41\xe7\x19\x71\x13\x9b\x30\xd5\x32\xc2\x85\xa4\xe4\xfd\xbc\x02\x80\xd5\x0c\x1d\xfb\xfe\x52\x84\x31\xa5\x35\xc7\xf3\x36\x17\x96\xb0\x67\x4a\xd3\xba\xe6\xfe\x78\x98\xf6\x5b\xb2\xe1\xa4\x2e\x50\x59\x7e\x1c\xef\xe7\xec\x81\xfc\x9e\x93\x3d\x51\xef\xf3\x00\xd7\xde\xa7\x6f\x3a\x12\x7d\x25\xed\xb2\x9f\x47\x2b\x5e\x9b\x4a\x0f\xfb\x54\x10\xf5\x0f\x27\xe5\x07\xe0\xd0\xe4\xc9\xab\xa2\x69\xbf\xdb\x0a\x35\xfc\x59\xd3\xb9\xf8\x57\x87\xfe\xc6\xf1\xf3\x7e\xcc\x73\x16\x6f\x0c\x3d\x48\x14\xb4\xf9\xe2\xe8\xfc\x31\x8e\x1f\x01\x00\x00\xff\xff\x51\x18\xbe\x04\x40\x03\x00\x00")

func templatesReadmeTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesReadmeTemplate,
		"templates/README.template",
	)
}

func templatesReadmeTemplate() (*asset, error) {
	bytes, err := templatesReadmeTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/README.template", size: 832, mode: os.FileMode(420), modTime: time.Unix(1524065808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/README.template": templatesReadmeTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"README.template": &bintree{templatesReadmeTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

